import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { AllVenuesResponse, MessageResponse, VenueResponse, LoggdInVenueResponse, AllTopVenueResponse } from "../../types/api-types";
import { Venue } from "../../types/types";

// Ensure VITE_API_Server is properly defined in your environment
const server = import.meta.env.VITE_API_Server;

export const VenueAPI = createApi({
  reducerPath: "venueAPI",
  baseQuery: fetchBaseQuery({
    baseUrl: `${server}/api/v1/venue/`, // Use base URL defined in VITE_API_Server
  }),
  tagTypes: ["venues"], // Define tag types for caching

  // endpoints: (builder) => ({
  //   allVenue: builder.query<AllVenuesResponse, string>({
  //     query: (filters) => {
  //       const queryString = new URLSearchParams(
  //         Object.entries(filters)
  //             .filter(([, v]) => v !== undefined && v !== null && v !== '')
  //             .map(([key, value]) => [key, String(value)])
  //     ).toString();

  //       return `all?${queryString}`;
  //     },
  //     providesTags: ["venues"], // Tags for caching
  //   }),

  endpoints: (builder) => ({
    allVenue: builder.query<AllVenuesResponse, Record<string, any>>({
        query: (filters) => {
            const queryString = new URLSearchParams(
                Object.entries(filters)
                    .filter(([, v]) => v !== undefined && v !== null && v !== '')
                    .map(([key, value]) => [
                        key,
                        Array.isArray(value) ? value.join(',') : String(value),
                    ])
            ).toString();

            return `all?${queryString}`;
        },
        providesTags: ["venues"], // Tags for caching
    }),



    signupVenue: builder.mutation<MessageResponse, Venue>({
      query: (venue) => ({
        url: "register",
        method: "POST",
        body: venue,
      }),
      invalidatesTags: ["venues"], // Invalidate venues tag after signup
    }),

    loginVenue: builder.mutation<LoggdInVenueResponse, { email: string; password: string }>({ //request body being sent to the server
      query: ({ email, password }) => ({
        url: "login",
        method: "POST",
        body: { email, password },
      }),
      invalidatesTags: ["venues"], // Invalidate venues tag after login
    }),

    getVenueById: builder.query<VenueResponse, string>({
      query: (id) => `${id}`,
      providesTags: ["venues"], // Tags for caching
    }),

    updateVenue: builder.mutation<MessageResponse, { venueId: string; formData: any }>({
      query: ({ venueId, formData }) => ({
        url: `${venueId}`,
        method: "PUT",
        body: formData,
      }),
      invalidatesTags: ["venues"], // Invalidate venues tag after update
    }),

    deleteVenueById: builder.mutation<VenueResponse, { id: string, user: string }>({
      query: ({ id, user }) => ({
        url: `${id}`,
        method: "DELETE",
        body: user
      }),
      invalidatesTags: ["venues"], // Invalidate venues tag after delete
    }),

    rankedVenues: builder.query<AllTopVenueResponse, void>({
      query: () => ({
        url: "/ranked/venues",
        method: "GET",
      }),
      providesTags: ["venues"], // Tags for caching
    }),
  }),
});

// Export hooks generated by VenueAPI for each endpoint
export const {
  useAllVenueQuery,
  useSignupVenueMutation,
  useLoginVenueMutation,
  useGetVenueByIdQuery,
  useUpdateVenueMutation,
  useDeleteVenueByIdMutation,
  useRankedVenuesQuery,
} = VenueAPI;